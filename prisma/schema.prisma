// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  email    String @unique
  password String

  userDetail UserDetail?
  userStatistics UserStatistics?
  experience     Experience[]
}

model UserDetail {
  id             String         @id @default(uuid())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.Uuid  @unique
  ssn            String         @unique
  userName       String         @unique
  firstName      String
  lastName       String
  phoneNumber    String?
  website        String?
  postalCode String?
  streetName String?
  city       String?
  country    String?
  role           Role           @default(USER)
}

model UserStatistics {
  id       String @id   @default(uuid()) @db.Uuid
  createdAt  DateTime    @default(now())
  lastLogin  DateTime?
  updatedAt  DateTime?
  user           User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String         @unique  @db.Uuid
}


model Experience {
  id       String @id   @default(uuid()) @db.Uuid
  years       Int?
  months      Int?
  order       Int?
  title       String?
  description String?
  editedAt    DateTime?
  published   Boolean?    @default(false)
  user           User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String         @db.Uuid
}

enum Role {
  USER
  ADMIN
}
